from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify
from flask_login import login_user, logout_user, current_user, login_required
from .models import db, User, Location
from .forms import RegistrationForm, LoginForm, LocationForm
from werkzeug.security import generate_password_hash, check_password_hash
import logging

bp = Blueprint('main', __name__)
logging.basicConfig(level=logging.DEBUG)

@bp.route('/')
def index():
    locations = Location.query.all()
    form = RegistrationForm()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–∞
    return render_template('index.html', locations=locations, form=form)

@bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(
            username=form.username.data,
            email=form.email.data,
            first_name=form.first_name.data,
            second_name=form.second_name.data,
        )
        user.set_password(form.password.data)
        user.set_phone(form.phone.data)
        db.session.add(user)
        db.session.commit()
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üòä', 'success')
        return jsonify(success=True)
    else:
        flash(f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {form.errors}', 'danger')
        logging.debug(f'Form validation failed: {form.errors}')
        return jsonify(success=False, message=form.errors)
    return render_template('register.html', form=form)

@bp.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return jsonify(success=True)
        else:
            flash('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å. üö´', 'danger')
            return jsonify(success=False, message='–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.')
    return render_template('login.html', form=form)

@bp.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('main.index'))

@bp.route('/add_location', methods=['POST'])
@login_required
def add_location():
    logging.debug('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏')
    form = LocationForm()
    if form.validate_on_submit():
        logging.debug('–§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
        try:
            latitude = float(request.form['latitude'])
            longitude = float(request.form['longitude'])
            new_location = Location(
                name=form.name.data,
                description=form.description.data,
                address=form.address.data,
                working_hours=form.working_hours.data,
                average_check=form.average_check.data,
                latitude=latitude,
                longitude=longitude,
                created_by=current_user.id
            )
            db.session.add(new_location)
            db.session.commit()
            logging.debug('–ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            return jsonify(success=True)
        except Exception as e:
            logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏: %s', e)
            return jsonify(success=False, message=str(e))
    else:
        logging.debug('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: %s', form.errors)
        return jsonify(success=False, message=form.errors)

@bp.route('/markers')
def markers():
    locations = Location.query.all()
    markers = []
    for location in locations:
        markers.append({
            'name': location.name,
            'description': location.description,
            'latitude': location.latitude,
            'longitude': location.longitude
        })
    return jsonify(markers)
