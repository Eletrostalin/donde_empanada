from datetime import datetime

from sqlalchemy.future import select

from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, current_app as app
from flask_login import login_user, logout_user, current_user, login_required

from .database import get_async_engine, get_async_session
from .models import db, User, Location, Review, OwnerInfo
from .forms import RegistrationForm, LoginForm, LocationForm, OwnerInfoForm, ReviewForm
import os

bp = Blueprint('main', __name__)

@bp.route('/')
def index():
    app.logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    registration_form = RegistrationForm()
    login_form = LoginForm()
    location_form = LocationForm()
    owner_info_form = OwnerInfoForm()
    review_form = ReviewForm()
    google_maps_api_key = os.getenv('GOOGLE_MAPS_API_KEY')

    return render_template('index.html',
                           registration_form=registration_form,
                           login_form=login_form,
                           location_form=location_form,
                           owner_info_form=owner_info_form,
                           review_form=review_form,
                           google_maps_api_key=google_maps_api_key)

@bp.route('/register', methods=['POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        app.logger.info("–§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")

        existing_user_by_username = User.query.filter_by(username=form.username.data).first()
        existing_user_by_phone = User.query.filter_by(phone_hash=form.phone.data).first()

        if existing_user_by_username:
            message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üö´'
            app.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return jsonify(success=False, message=message)

        if existing_user_by_phone:
            message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üö´'
            app.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return jsonify(success=False, message=message)

        try:
            user = User(
                username=form.username.data,
                email=form.email.data,
                first_name=form.first_name.data,
                second_name=form.second_name.data,
            )
            user.set_password(form.password.data)
            user.set_phone(form.phone.data)
            db.session.add(user)
            app.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            db.session.commit()
            message = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üòä'
            app.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return jsonify(success=True, message=message)

        except Exception as e:
            app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            db.session.rollback()
            return jsonify(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    else:
        app.logger.warning("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {", ".join(error_messages)} üö´'
        return jsonify(success=False, message=message)

@bp.route('/login', methods=['POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            message = '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! üòä'
            flash(message, 'success')
            app.logger.info(message)
            return jsonify(success=True, message=message)
        else:
            message = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å. üö´'
            flash(message, 'danger')
            app.logger.warning(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {", ".join(error_messages)} üö´'
        flash(message, 'danger')
        app.logger.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/logout')
@login_required
def logout():
    logout_user()
    message = '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã! üòä'
    flash(message, 'success')
    app.logger.info(message)
    return redirect(url_for('main.index'))

@bp.route('/add_location', methods=['POST'])
@login_required
def add_location():
    app.logger.debug('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏')
    form = LocationForm()
    if form.validate_on_submit():
        app.logger.debug('–§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
        try:
            latitude = request.form.get('latitude', type=float)
            longitude = request.form.get('longitude', type=float)

            if latitude is None or longitude is None:
                raise ValueError("Latitude –∏–ª–∏ Longitude –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞.")

            app.logger.debug('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %s, %s', latitude, longitude)
            new_location = Location(
                name=form.name.data,
                address=form.address.data,
                working_hours_start=form.working_hours_start.data,
                working_hours_end=form.working_hours_end.data,
                average_check=form.average_check.data,
                latitude=latitude,
                longitude=longitude,
                created_by=current_user.id
            )
            db.session.add(new_location)
            db.session.commit()
            message = '–¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üòä'
            app.logger.info(message)
            return jsonify(success=True, message=message, location_id=new_location.id)
        except Exception as e:
            message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏: {e} üö´'
            app.logger.error(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {", ".join(error_messages)} üö´'
        app.logger.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/add_owner_info', methods=['POST'])
@login_required
def add_owner_info():
    form = OwnerInfoForm()  # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if form.validate_on_submit():
        try:
            user_id = current_user.id
            location_id = request.form.get('location_id')
            website = request.form.get('website')
            owner_info = request.form.get('owner_info')

            app.logger.info(f'User ID: {user_id}, Location ID: {location_id}, Website: {website}, Owner Info: {owner_info}')

            if not location_id:
                raise ValueError("Location ID is missing.")

            owner_info_entry = OwnerInfo(user_id=user_id, location_id=int(location_id), website=website, owner_info=owner_info)
            db.session.add(owner_info_entry)
            db.session.commit()

            message = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! üòä'
            app.logger.info(message)
            return jsonify(success=True, message=message)
        except Exception as e:
            message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e} üö´'
            app.logger.error(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {", ".join(error_messages)} üö´'
        app.logger.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/markers')
async def markers():
    engine = get_async_engine()
    async_session = get_async_session(engine)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π

    async with async_session() as session:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        result = await session.execute(select(Location))
        locations = result.scalars().all()

    markers = []
    for location in locations:
        markers.append({
            'id': location.id,
            'name': location.name,
            'latitude': location.latitude,
            'longitude': location.longitude,
            'address': location.address,
            'working_hours': f"{location.working_hours_start} - {location.working_hours_end}",
            'average_check': location.average_check,
            'average_rating': location.average_rating,
            'rating_count': location.rating_count
        })

    app.logger.info('–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω')
    return jsonify(markers)

@bp.route('/reviews/<int:location_id>')
def reviews(location_id):
    reviews = Review.query.filter_by(location_id=location_id).all()
    reviews_list = [
        {
            'user_name': review.user.username,
            'comment': review.comment,
            'rating': review.rating
        } for review in reviews
    ]
    return jsonify(reviews_list)

@bp.route('/add_review', methods=['POST'])
@login_required
def add_review():
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        location_id_str = request.form.get('location_id', '').strip()
        app.logger.info(f"Received location_id: {location_id_str}")

        if not location_id_str:
            raise ValueError("Location ID is missing or invalid.")

        location_id = int(location_id_str)
        comment = request.form['comment'].strip()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        app.logger.info(f"Received comment: {comment}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        existing_review = Review.query.filter_by(user_id=current_user.id, location_id=location_id).first()

        if existing_review:
            app.logger.info(f"Found existing review for location {location_id}")
            if existing_review.comment:
                app.logger.info(f"User already added a review for location {location_id}")
                return jsonify(success=False, message='–í–∞—à –æ—Ç–∑—ã–≤ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.')
            else:
                existing_review.comment = comment
                existing_review.created_at = datetime.utcnow()
                db.session.commit()
                app.logger.info(f"Review updated for location {location_id}")
                return jsonify(success=True, message='–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')

        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        new_review = Review(user_id=current_user.id, location_id=location_id, comment=comment)
        db.session.add(new_review)
        db.session.commit()
        app.logger.info(f"New review added for location {location_id}")
        return jsonify(success=True, message='–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')

    except ValueError as ve:
        app.logger.error(f'–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã: {ve}')
        return jsonify(success=False, message=f'–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã: {ve}')

    except Exception as e:
        app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}')
        return jsonify(success=False, message=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}')

@bp.route('/rate_location', methods=['POST'])
@login_required
def rate_location():
    try:
        location_id = request.json['location_id']
        rating = int(request.json['rating'])

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        app.logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        existing_review = Review.query.filter_by(user_id=current_user.id, location_id=location_id).first()

        if existing_review:
            app.logger.info(f'–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id}: {existing_review}')
            if existing_review.rating is not None:
                app.logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} —É–∂–µ –¥–æ–±–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id}')
                return jsonify(success=False, message='–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
            else:
                existing_review.rating = rating
                db.session.commit()
                app.logger.info(
                    f'–û—Ü–µ–Ω–∫–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}')
                return jsonify(success=True, message='–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è
            new_review = Review(user_id=current_user.id, location_id=location_id, rating=rating)
            db.session.add(new_review)
            db.session.commit()
            app.logger.info(f'–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.id}')
            return jsonify(success=True, message='–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')

    except Exception as e:
        app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}')
        return jsonify(success=False, message=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}')

