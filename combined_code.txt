
# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/run.py
import os
import logging
import asyncio

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from sqlalchemy import text
from app import create_app
from app.models import db, Migration

app = create_app()

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Асинхронный движок SQLAlchemy с использованием драйвера asyncpg
DATABASE_URL = os.getenv('DATABASE_URL').replace("psycopg2", "asyncpg")
async_engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(
    bind=async_engine,
    expire_on_commit=False,
    class_=AsyncSession
)

async def check_any_table_exists() -> bool:
    """
    Проверяет, существуют ли какие-либо таблицы в базе данных.
    Возвращает True, если таблицы существуют, иначе False.
    """
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                text("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public');")
            )
            return result.scalar()

async def apply_migrations():
    """
    Применяет новые миграции из папки migrations к базе данных, используя SQLAlchemy.
    """
    migrations_folder = 'migrations'

    # Проверка наличия любых таблиц в базе данных
    tables_exist = await check_any_table_exists()

    async with async_session() as session:
        if tables_exist:
            # Проверяем, существует ли таблица migrations
            result = await session.execute(
                text("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'migration');")
            )
            migrations_table_exists = result.scalar()

            if migrations_table_exists:
                # Получаем список применённых миграций из таблицы migration
                result = await session.execute(select(Migration.migration_name))
                applied_migrations = set(row[0] for row in result.all())
            else:
                applied_migrations = set()
                logging.info("Таблица 'migration' не найдена. Применение всех миграций.")
        else:
            applied_migrations = set()
            logging.info("Таблицы не найдены в базе данных. Применение всех миграций.")

        # Получение списка всех SQL файлов в папке миграций
        all_migrations = [f for f in os.listdir(migrations_folder) if f.endswith('.sql')]

        # Фильтрация новых миграций, которые ещё не были применены
        new_migrations = [m for m in all_migrations if m not in applied_migrations]

        # Сортировка миграций по имени файла для их применения в порядке
        new_migrations.sort()

        if new_migrations:
            logging.info(f"Найдено {len(new_migrations)} новых миграций: {new_migrations}")

            async with async_engine.connect() as conn:  # Используем async_engine для подключения к базе данных
                async with conn.begin():  # Начало транзакции
                    try:
                        for migration in new_migrations:
                            migration_file_path = os.path.join(migrations_folder, migration)

                            # Открытие файла миграции и чтение SQL команд
                            with open(migration_file_path, 'r', encoding='utf-8') as migration_file:
                                sql_commands = migration_file.read()

                            # Разделение команд по ';' и выполнение каждой команды отдельно
                            for command in sql_commands.split(';'):
                                command = command.strip()
                                if command:  # Игнорируем пустые строки
                                    logging.info(f"Применение SQL команды:\n{command}")
                                    await conn.execute(text(command))  # Выполнение SQL команды

                        await conn.commit()

                        # Добавление миграций в базу данных после выполнения всех команд
                        for migration in new_migrations:
                            new_migration = Migration(migration_name=migration)
                            session.add(new_migration)
                        await session.commit()
                        logging.info(f"Миграции {new_migrations} успешно применены.")

                    except Exception as e:
                        logging.error(f"Ошибка при применении миграции: {e}")
                        await conn.rollback()  # Откат транзакции при ошибке
                    else:
                        await conn.commit()  # Подтверждение транзакции
        else:
            logging.info("Новые миграции отсутствуют.")


def main():
    """
    Основная функция для запуска приложения.
    """
    with app.app_context():
        asyncio.run(apply_migrations())  # Применяем миграции
    app.run(debug=True)

if __name__ == '__main__':
    main()

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/run.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/config.py
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'you-will-never-guess')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')
# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/config.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/рудзук.py
import os

def gather_code_from_directory(directory, output_file, ignore_dirs=None):
    if ignore_dirs is None:
        ignore_dirs = {'.venv', 'migrations'}

    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(directory):
            # Игнорируем указанные директории
            dirs[:] = [d for d in dirs if d not in ignore_dirs]
            for file in files:
                if file.endswith(('.py', '.html', '.css')):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(f"\n# Code from {file_path}\n")
                        outfile.write(infile.read())
                        outfile.write(f"\n# End of code from {file_path}\n")

if __name__ == "__main__":
    project_directory = os.getcwd()  # Текущая рабочая директория
    output_file_path = "combined_code.txt"  # Имя выходного файла

    gather_code_from_directory(project_directory, output_file_path)
    print(f"Code from all .py, .html, and .css files in {project_directory} has been combined into {output_file_path}")

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/рудзук.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/models.py
# models.py

from datetime import datetime
from . import db
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), nullable=True)
    password_hash = db.Column(db.String(256), nullable=False)
    first_name = db.Column(db.String(150), nullable=False)
    second_name = db.Column(db.String(150), nullable=False)
    phone_hash = db.Column(db.String(256), unique=True, nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def set_phone(self, phone):
        self.phone_hash = generate_password_hash(phone)

    def check_phone(self, phone):
        return check_password_hash(self.phone_hash, phone)

class Location(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    description = db.Column(db.Text, nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    average_rating = db.Column(db.Float, default=0, nullable=False)
    rating_count = db.Column(db.Integer, default=0)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    address = db.Column(db.String(255), nullable=True)
    working_hours = db.Column(db.String(255), nullable=True)
    average_check = db.Column(db.Integer, nullable=True)

    reviews = db.relationship('Review', backref='location', lazy=True)
    owner_info = db.relationship('OwnerInfo', backref='location', uselist=False)  # Связь с OwnerInfo

class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'), nullable=False)
    rating = db.Column(db.Integer, nullable=False)
    comment = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    user = db.relationship('User', backref='reviews', lazy=True)

    def __repr__(self):
        return f'<Review {self.rating}>'

class OwnerInfo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'), nullable=False)
    website = db.Column(db.String(200), nullable=True)
    owner_info = db.Column(db.Text, nullable=False)

    user = db.relationship('User', backref='owner_info', lazy=True)

class Migration(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    migration_name = db.Column(db.String(255), nullable=False, unique=True)
    applied_at = db.Column(db.DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f'<Migration {self.migration_name} applied at {self.applied_at}>'

    def __repr__(self):
        return f'<OwnerInfo {self.id}>'

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/models.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
import logging
from logging import StreamHandler
import sys

# Инициализация расширений
db = SQLAlchemy()
login_manager = LoginManager()
csrf = CSRFProtect()

def create_app():
    app = Flask(__name__)
    app.config.from_object('config.Config')

    # Настройка логирования
    stream_handler = StreamHandler(sys.stdout)
    stream_handler.setLevel(logging.DEBUG)
    app.logger.addHandler(stream_handler)
    app.logger.setLevel(logging.DEBUG)

    # Логирование для Alembic
    alembic_logger = logging.getLogger('alembic')
    alembic_logger.addHandler(stream_handler)
    alembic_logger.setLevel(logging.INFO)

    # Инициализация расширений
    db.init_app(app)
    login_manager.init_app(app)
    csrf.init_app(app)

    with app.app_context():
        from . import models
        from .models import User

        @login_manager.user_loader
        def load_user(user_id):
            return User.query.get(int(user_id))

    from . import routes
    app.register_blueprint(routes.bp)

    return app

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/__init__.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, IntegerField, TextAreaField
from wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError, Optional, NumberRange
import re

def validate_username(form, field):
    if not re.match(r'^[a-zA-Z]+$', field.data):  # Только буквы
        raise ValidationError('Имя пользователя должно содержать только буквы.')

def validate_name(form, field):
    if not re.match(r'^[a-zA-Z]+$', field.data):
        raise ValidationError('Это поле должно содержать только буквы.')

def validate_phone(form, field):
    if not re.match(r'^[0-9]+$', field.data):
        raise ValidationError('Телефон должен содержать только цифры.')

# Новый валидатор для часов работы
def validate_working_hours(form, field):
    if not re.match(r'^\d{2}:\d{2} - \d{2}:\d{2}$', field.data):
        raise ValidationError('Время работы должно быть в формате xx:xx - xx:xx.')

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(message="Поле не может быть пустым"), validate_username])
    email = StringField('Email', validators=[Optional(), Email(message="Неправильный формат email")])
    password = PasswordField('Password', validators=[
        DataRequired(message="Поле не может быть пустым"),
        Length(min=8, message="Пароль должен содержать минимум 8 символов"),
        lambda form, field: re.match(r'^(?=.*[a-z])(?=.*\d).+$', field.data) or ValidationError(
            "Пароль должен содержать цифры и строчные буквы"
        )
    ])
    confirm_password = PasswordField('Confirm Password', validators=[
        DataRequired(message="Поле не может быть пустым"),
        EqualTo('password', message="Пароли должны совпадать")
    ])
    first_name = StringField('First Name', validators=[DataRequired(message="Поле не может быть пустым"), validate_name])
    second_name = StringField('Second Name', validators=[DataRequired(message="Поле не может быть пустым"), validate_name])
    phone = StringField('Phone', validators=[DataRequired(message="Поле не может быть пустым"), validate_phone])
    submit = SubmitField('Register')

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class LocationForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired()])
    description = TextAreaField('Description', validators=[DataRequired()])
    address = StringField('Address', validators=[DataRequired()])
    working_hours = StringField('Working Hours', validators=[DataRequired(), validate_working_hours])
    average_check = IntegerField('Average Check', validators=[DataRequired(), NumberRange(min=2000, max=5000)])  # Установка диапазона
    submit_add = SubmitField('Добавить')  # Кнопка для добавления
    submit_cancel = SubmitField('Отмена')  # Кнопка для отмены
    submit_owner = SubmitField('Я хозяин')  # Кнопка для открытия доп. формы

class ReviewForm(FlaskForm):
    rating = IntegerField('Rating', validators=[DataRequired()])
    comment = TextAreaField('Comment', validators=[DataRequired()])
    submit = SubmitField('Add Review')

class OwnerInfoForm(FlaskForm):
    website = StringField('Website', validators=[Optional(), Length(max=200), Email(message='Введите корректный URL')])
    owner_info = TextAreaField('Info About You and Your Establishment', validators=[DataRequired(), Length(max=500)])
    submit = SubmitField('Отправить')  # Кнопка для отправки информации

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/forms.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/routes.py
# routes.py

from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, current_app as app
from flask_login import login_user, logout_user, current_user, login_required
from .models import db, User, Location, Review, OwnerInfo
from .forms import RegistrationForm, LoginForm, LocationForm, OwnerInfoForm
import logging
import os

bp = Blueprint('main', __name__)

@bp.route('/')
def index():
    app.logger.info('Загрузка главной страницы')
    # Инициализация всех необходимых форм
    registration_form = RegistrationForm()
    login_form = LoginForm()
    location_form = LocationForm()
    owner_info_form = OwnerInfoForm()
    google_maps_api_key = os.getenv('GOOGLE_MAPS_API_KEY')

    # Передача всех форм в шаблон
    return render_template('index.html',
                           registration_form=registration_form,
                           login_form=login_form,
                           location_form=location_form,
                           owner_info_form=owner_info_form,
                           google_maps_api_key=google_maps_api_key)
@bp.route('/register', methods=['POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        existing_user_by_username = User.query.filter_by(username=form.username.data).first()
        existing_user_by_phone = User.query.filter_by(phone_hash=form.phone.data).first()

        if existing_user_by_username:
            message = 'Пользователь с таким именем уже существует. 🚫'
            return jsonify(success=False, message=message)

        if existing_user_by_phone:
            message = 'Пользователь с таким телефоном уже существует. 🚫'
            return jsonify(success=False, message=message)

        user = User(
            username=form.username.data,
            email=form.email.data,
            first_name=form.first_name.data,
            second_name=form.second_name.data,
        )
        user.set_password(form.password.data)
        user.set_phone(form.phone.data)
        db.session.add(user)
        db.session.commit()
        message = 'Регистрация прошла успешно! 😊'
        return jsonify(success=True, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'Ошибка регистрации: {", ".join(error_messages)} 🚫'
        return jsonify(success=False, message=message)

@bp.route('/login', methods=['POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            message = 'Вход выполнен успешно! 😊'
            flash(message, 'success')
            app.logger.info(message)
            return jsonify(success=True, message=message)
        else:
            message = 'Ошибка входа. Проверьте имя пользователя и пароль. 🚫'
            flash(message, 'danger')
            app.logger.warning(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'Ошибки валидации формы: {", ".join(error_messages)} 🚫'
        flash(message, 'danger')
        app.logger.error(f'Ошибка валидации формы: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/logout')
@login_required
def logout():
    logout_user()
    message = 'Вы успешно вышли из системы! 😊'
    flash(message, 'success')
    app.logger.info(message)
    return redirect(url_for('main.index'))

@bp.route('/add_location', methods=['POST'])
@login_required
def add_location():
    app.logger.debug('Получен запрос на добавление метки')
    form = LocationForm()
    if form.validate_on_submit():
        app.logger.debug('Форма прошла валидацию')
        try:
            latitude = float(request.form['latitude'])
            longitude = float(request.form['longitude'])
            app.logger.debug('Координаты: %s, %s', latitude, longitude)
            new_location = Location(
                name=form.name.data,
                description=form.description.data,
                address=form.address.data,
                working_hours=form.working_hours.data,
                average_check=form.average_check.data,
                latitude=latitude,
                longitude=longitude,
                created_by=current_user.id
            )
            db.session.add(new_location)
            db.session.commit()
            message = 'Метка успешно добавлена в базу данных! 😊'
            app.logger.info(message)
            return jsonify(success=True, message=message)
        except Exception as e:
            message = f'Произошла ошибка при добавлении метки: {e} 🚫'
            app.logger.error(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'Ошибки валидации формы: {", ".join(error_messages)} 🚫'
        app.logger.error(f'Ошибка валидации формы: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/add_owner_info', methods=['POST'])
@login_required
def add_owner_info():
    form = OwnerInfoForm()
    if form.validate_on_submit():
        try:
            location_id = request.form['location_id']
            new_owner_info = OwnerInfo(
                user_id=current_user.id,
                location_id=location_id,
                website=form.website.data,
                owner_info=form.owner_info.data
            )
            db.session.add(new_owner_info)
            db.session.commit()
            message = 'Информация о владельце успешно добавлена в базу данных! 😊'
            app.logger.info(message)
            return jsonify(success=True, message=message)
        except Exception as e:
            message = f'Произошла ошибка при добавлении информации: {e} 🚫'
            app.logger.error(message)
            return jsonify(success=False, message=message)
    else:
        error_messages = [f"{field}: {', '.join(errors)}" for field, errors in form.errors.items()]
        message = f'Ошибки валидации формы: {", ".join(error_messages)} 🚫'
        app.logger.error(f'Ошибка валидации формы: {form.errors}')
        return jsonify(success=False, message=message)

@bp.route('/markers')
def markers():
    locations = Location.query.all()
    markers = []
    for location in locations:
        markers.append({
            'id': location.id,
            'name': location.name,
            'description': location.description,
            'latitude': location.latitude,
            'longitude': location.longitude,
            'address': location.address,
            'working_hours': location.working_hours,
            'average_check': location.average_check,
            'average_rating': location.average_rating,
            'rating_count': location.rating_count
        })
    app.logger.info('Список меток успешно загружен')
    return jsonify(markers)

@bp.route('/reviews/<int:location_id>')
def reviews(location_id):
    reviews = Review.query.filter_by(location_id=location_id).all()
    reviews_list = [
        {
            'user_name': review.user.username,
            'comment': review.comment,
            'rating': review.rating
        } for review in reviews
    ]
    return jsonify(reviews_list)

@bp.route('/add_review', methods=['POST'])
@login_required
def add_review():
    try:
        location_id = request.form['location_id']
        rating = int(request.form['rating'])
        comment = request.form['comment']

        new_review = Review(
            user_id=current_user.id,
            location_id=location_id,
            rating=rating,
            comment=comment
        )
        db.session.add(new_review)
        db.session.commit()

        location = Location.query.get(location_id)
        reviews = Review.query.filter_by(location_id=location_id).all()
        total_ratings = sum([review.rating for review in reviews])
        location.rating_count = len(reviews)
        location.average_rating = total_ratings / location.rating_count if location.rating_count else 0
        db.session.commit()

        return jsonify(success=True, message='Отзыв успешно добавлен!')
    except Exception as e:
        app.logger.error(f'Ошибка при добавлении отзыва: {e}')
        return jsonify(success=False, message=f'Ошибка при добавлении отзыва: {e}')

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/routes.py

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/static/styles.css
/* Основной фон страницы */
body, html {
    height: 100%;
    margin: 0;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    background-color: #f4f4f9;
    font-size: 14px; /* Уменьшение размера шрифта */
}

/* Стили для карты */
#map {
    height: 100%;
}

/* Шапка */
.header {
    position: absolute;
    top: 30px;
    left: 30px;
    right: 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #ffffff;
    z-index: 2;
    border-radius: 24px;
    padding: 0 20px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
}

.header img {
    height: 50px;
    cursor: pointer;
}

.login-button {
    cursor: pointer;
    color: #dd362f; /* rgb(221, 54, 47) */
}

.login-button:hover {
    color: #fca711; /* rgb(252, 167, 17) */
}

.link {
    cursor: pointer;
    color: #dd362f; /* rgb(221, 54, 47) */
}

.link:hover {
    color: #fca711; /* rgb(252, 167, 17) */
}

.custom-button-right {
    position: absolute;
    top: 100px;
    right: 50px;
    z-index: 2;
}

.custom-button-right img {
    width: 40px; /* уменьшено на 20% */
    height: 40px; /* уменьшено на 20% */
    cursor: pointer;
    border-radius: 12px; /* скругление углов */
}

.modal {
    display: none;
    position: fixed;
    z-index: 3;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #ffffff;
    margin: auto;
    padding: 18px; /* Уменьшение padding */
    border: 1px solid #888;
    width: 30%; /* Ширина 30% экрана */
    border-radius: 10px;
    position: relative;
    top: 50%;
    transform: translateY(-50%);

}

.modal-content .form-group {
    margin-bottom: 8px; /* Уменьшение отступов */
}

.modal-content label {
    margin-bottom: 4px; /* Уменьшение отступов */
    font-weight: bold;
    color: #dd362f; /* rgb(221, 54, 47) */
}

.modal-content input, .modal-content select, .modal-content textarea, .modal-content button {
    display: block;
    width: 100%;
    padding: 8px; /* Уменьшение отступов */
    margin-bottom: 8px; /* Уменьшение отступов */
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 12px; /* Уменьшение размера шрифта */
}

.modal-content button.btn-primary {
    background-color: #dd362f; /* rgb(221, 54, 47) */
    border: none;
    color: #fff;
}

.modal-content button.btn-primary:hover {
    background-color: #fca711; /* rgb(252, 167, 17) */
}

.modal-content button.btn-secondary {
    background-color: #f4f4f9;
    border: 1px solid #ddd;
    color: #000;
}

.modal-content button.btn-secondary:hover {
    background-color: #ddd;
}

.dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}

.dropdown-content a:hover {
    background-color: #f1f1f1;
}

#zoom-controls {
    position: absolute;
    bottom: 150px;
    right: 50px;
    z-index: 2;
}

#zoom-controls div {
    margin-bottom: 10px;
}

.centered-form {
    width: 90%; /* Уменьшение ширины до 90% */
    max-width: 400px; /* Максимальная ширина формы */
    font-size: 14px;
}

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/static/styles.css

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/index.html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Application</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <meta name="language" content="ru">
</head>

<body>
    <div class="header">
        <img src="{{ url_for('static', filename='logo.png') }}" alt="Logo" onclick="location.reload()">
        {% if current_user.is_authenticated %}
        <div class="dropdown">
            <img src="{{ url_for('static', filename='profile.png') }}" alt="Profile" class="dropdown-toggle" id="profileDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <div class="dropdown-menu" aria-labelledby="profileDropdown">
                <a class="dropdown-item" href="#">Аккаунт</a>
                <a class="dropdown-item" href="#">Настройки</a>
                <a class="dropdown-item" href="{{ url_for('main.logout') }}">Выйти</a>
            </div>
        </div>
        {% else %}
        <div class="login-button" onclick="document.getElementById('login-modal').style.display='block'">Войти</div>
        {% endif %}
    </div>
    <div id="map"></div>
    {% if current_user.is_authenticated %}
    <div class="custom-button-right" id="add-marker" onclick="promptLocationSelection()">
        <img src="{{ url_for('static', filename='add.png') }}" alt="Add Marker">
    </div>
    {% endif %}
    <div class="custom-button-right" id="my-location" style="margin-top: 170px !important;" onclick="locateMe()">
        <img src="{{ url_for('static', filename='location.png') }}" alt="My Location">
    </div>
    <div class="custom-button-right" id="zoom-controls" style="top: 350px !important;">
        <div onclick="zoomIn()">
            <img src="{{ url_for('static', filename='zoom_in.png') }}" alt="Zoom In">
        </div>
        <div onclick="zoomOut()">
            <img src="{{ url_for('static', filename='zoom_out.png') }}" alt="Zoom Out">
        </div>
    </div>

    <!-- Login Modal -->
    <div id="login-modal" class="modal">
        <div class="modal-content centered-form">
            <form id="login-form" action="{{ url_for('main.login') }}" method="post" onsubmit="handleLogin(event)">
                {{ login_form.hidden_tag() }}
                {{ login_form.csrf_token }}
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" class="form-control" name="username" placeholder="Имя пользователя" required>
                </div>
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" class="form-control" name="password" placeholder="Пароль" required>
                </div>
                <button type="submit" class="btn btn-primary">Войти</button>
                <button type="button" class="btn btn-secondary" onclick="closeLoginForm()">Отмена</button>
                <div class="link" onclick="showRegistrationForm()">Нет аккаунта?</div>
            </form>
        </div>
    </div>

    <!-- Registration Modal -->
    <div id="registration-modal" class="modal">
        <div class="modal-content centered-form">
            <form id="registration-form" action="{{ url_for('main.register') }}" method="post" onsubmit="handleRegistration(event)">
                {{ registration_form.hidden_tag() }}
                {{ registration_form.csrf_token }}
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" class="form-control" name="username" placeholder="Имя пользователя" required>
                </div>
                <div class="form-group">
                    <label for="first_name">Имя</label>
                    <input type="text" class="form-control" name="first_name" placeholder="Имя" required>
                </div>
                <div class="form-group">
                    <label for="second_name">Фамилия</label>
                    <input type="text" class="form-control" name="second_name" placeholder="Фамилия" required>
                </div>
                <div class="form-group">
                    <label for="email">Электронная почта</label>
                    <input type="email" class="form-control" name="email" placeholder="Электронная почта" required>
                </div>
                <div class="form-group">
                    <label for="phone">Телефон</label>
                    <input type="text" class="form-control" name="phone" placeholder="Телефон" required>
                </div>
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" class="form-control" name="password" placeholder="Пароль" required>
                </div>
                <div class="form-group">
                    <label for="confirm_password">Повторите пароль</label>
                    <input type="password" class="form-control" name="confirm_password" placeholder="Повторите пароль" required>
                </div>
                <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
                <button type="button" class="btn btn-secondary" onclick="closeRegistrationForm()">Отмена</button>
            </form>
        </div>
    </div>

    <!-- Add Marker Modal -->
    <div id="add-marker-modal" class="modal">
        <div class="modal-content centered-form">
            <form id="add-marker-form" action="{{ url_for('main.add_location') }}" method="post" onsubmit="handleAddLocation(event)">
                {{ location_form.hidden_tag() }}
                {{ location_form.csrf_token }}
                <div class="form-group">
                    <label for="name">Название</label>
                    <input type="text" class="form-control" name="name" placeholder="Название (не более 30 символов)" maxlength="30" required>
                </div>
                <div class="form-group">
                    <label for="address">Адрес</label>
                    <input type="text" class="form-control" name="address" placeholder="Адрес (до 150 символов)" maxlength="150">
                </div>
                <div class="form-group">
                    <label for="average_check">Цена за эмпанадос</label>
                    <input type="number" class="form-control" name="average_check" placeholder="Цена (2000 - 5000)" min="2000" max="5000" required>
                </div>
                <div class="form-group">
                    <label for="working_hours">Часы работы</label>
                    <input type="text" class="form-control" name="working_hours" placeholder="Часы работы (например, 9:00 - 18:00)" required>
                </div>
                <button type="submit" class="btn btn-primary">Добавить</button>
                <button type="button" class="btn btn-secondary" onclick="closeAddMarkerForm()">Отмена</button>
                <button type="button" class="btn btn-info" onclick="document.getElementById('owner-info-modal').style.display='block'">Я хозяин</button>
            </form>
        </div>
    </div>

    <!-- Owner Info Modal -->
    <div id="owner-info-modal" class="modal">
        <div class="modal-content centered-form">
            <form id="owner-info-form" action="{{ url_for('main.add_owner_info') }}" method="post" onsubmit="handleOwnerInfoSubmit(event)">
                {{ owner_info_form.hidden_tag() }}
                {{ owner_info_form.csrf_token }}
                <div class="form-group">
                    <label for="website">Веб-сайт</label>
                    <input type="url" class="form-control" name="website" placeholder="URL сайта (до 200 символов)" maxlength="200">
                </div>
                <div class="form-group">
                    <label for="owner_info">Информация о вас и вашем заведении</label>
                    <textarea name="owner_info" class="form-control" rows="4" required></textarea>
                </div>
                <input type="hidden" name="location_id" id="location_id">
                <button type="submit" class="btn btn-primary">Отправить</button>
                <button type="button" class="btn btn-secondary" onclick="closeOwnerInfoForm()">Отмена</button>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="{{ url_for('static', filename='script.js') }}"></script>
    <script async src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&callback=initMap"></script>
</body>

</html>

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/index.html

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/register.html
{% extends 'base.html' %}

{% block title %}Регистрация{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
    <form method="post" id="registerForm">
        {{ form.hidden_tag() }}
        <div class="mb-3">
            {{ form.username.label(class="form-label") }}
            {{ form.username(class="form-control") }}
            {% if form.username.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.username.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.email.label(class="form-label") }}
            {{ form.email(class="form-control") }}
            {% if form.email.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.email.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.password.label(class="form-label") }}
            {{ form.password(class="form-control") }}
            {% if form.password.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.password.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.confirm_password.label(class="form-label") }}
            {{ form.confirm_password(class="form-control") }}
            {% if form.confirm_password.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.confirm_password.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.first_name.label(class="form-label") }}
            {{ form.first_name(class="form-control") }}
            {% if form.first_name.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.first_name.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.second_name.label(class="form-label") }}
            {{ form.second_name(class="form-control") }}
            {% if form.second_name.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.second_name.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.phone.label(class="form-label") }}
            {{ form.phone(class="form-control") }}
            {% if form.phone.errors %}
                <div class="alert alert-danger" role="alert">
                    {{ form.phone.errors[0] }} 🛑
                </div>
            {% endif %}
        </div>
        <div class="mb-3">
            {{ form.submit(class="btn btn-primary") }}
        </div>
    </form>
</div>
{% endblock %}

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/register.html

# Code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/page404.html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Страница не найдена</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { font-size: 48px; color: #333; }
        p { font-size: 24px; color: #666; }
        a { font-size: 24px; color: #007BFF; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <h1>Ой! Страница не найдена.</h1>
    <p>К сожалению, запрашиваемая вами страница не может быть найдена. Это может быть из-за ошибки в адресе или потому что страница была перемещена или удалена.</p>
    <p><a href="/">Вернуться на главную страницу</a></p>
</body>
</html>

# End of code from /Users/nickstanchenkov/donde_empanada4/donde_empanada4/app/templates/page404.html
